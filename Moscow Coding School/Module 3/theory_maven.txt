Сборщик проекта:
 может откомпилировать исходные модули
 провести модульное тестирование
 отмкомпилированные модули разложить в определенную папочную структуру
 упаковать их 
 скопировать к модулям необходимые ресурсы
 залить приложение на сервер и др

 Сборщики - специализированное ПО, автоматизирующее процесс сборки
 Совокупность этапов сборки называется build. 

 Сборщик должен гибко настраиваться
 - необходим внешний файл с инструкциями к сборщику, в котором написанно что именно производить и где
 Сборщик должен быть расширяем
 - должна быть возможность добавления новых операций которые может производить сборщику
 Сборщик должен быть платформо независимым
 - должна быть возможность сборки в любой ОС
 - не должно быть привязки к IDE

 Примеры сборщиков:
 Make - C/C++;
 ANT - Java
 NANT - .NET
 MAVEN - Java
 SBT - Scala
 GRADLE - Java

 У MAVEN есть 3 уровня конфигураций
 project/pom.xml - конфигурация конкретного проекта
 ~/.m2/settings.xml - конфигурация всех проектов пользователя
 {M2_HOME}/conf/settings.xml - общая конф для всех пользователей

 Состоит из 3 компонентов:

 - Ядро, в котором описаны базовые принципы и устройства проектов
 - плагины, содержащие код и выполняющие цели
 - репозиторий (локальный или удаленный)

 Архетип - плагин для генерации шаблонов проектов (каркасов), включающих основные каталоги и конфигурацию проекта

 mvn archetype:generate
		-DgroupId = com.mycompany.app  - название пакета
		-DartifactId = my-app - название приложения
		-DarchetypeArtifactId = maven-archetype-quickstart  - название шаблона
		-DarchetypeVersion = 1.4 - версия
		-Dinteractivemode= false - не хотим что бы нас ни о чем больше не спрашивали

		mvn archetype:generate -DgroupId=com.mycompany.app -DartifactId=my-app -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.4 -Dinteractivemode=false

		com.vaadin:vaadin-archetype-clean:6.0.2
		groupID          artifactId        version

		Структура POM файла
	POM - project Object Model
	POM файл содрежит описание нашего проекта (декларативный стиль) и все специфические настройки

	Наследование РОМ файла
	Каждый РОМ файл по умолчанию наследует super POM.
	Super POM:${M2_HOME}/lib/maven-2.0.10-uber.jar

	Super POM - это виртуальный pom.xml внутри библиотеки Maven который содержит стандартные настройки наследуемые всеми проектами:
	- объявление центрального репозитория (id = central)
	- настройки файловой структуры в поле build
	- версии по умолчанию часто используемых плагинов

	просмотр результирующего РОМ файла: mvn help:effective-pom

	Dependecy
	mvn dependecy:tree
	mvn dependecy:resolve - в алфавитном порядке
	mvn dependecy:unpack - извлечь зависимости в указанную директорию
	mvn dependecy:analyze - анализ зависимостей (поиск не используемых)

	свойства
	доступ к свойству осуществляется с помощью ${...}

	типы свойств:
	свойства в pom файле: ${project.*}
	предопределенные свойства settings.*, env.*, System.getProperty();
	свойства объявленные в внешнем файле

	свойства внутри РОМ файла объявляются с помощью тега <properties>

	<properties>
		<temp.directory>/tmp</temp.directory>
	<properties>

	для проверки свойств можно воспользоваться целью evaluate в плагине maven-help-plugin
	mvn help:evaluate

	для просмотра всех системных свойств можно использовать плагин хелпа цель System
	mvn help:system

	Жизненный цикл проекта
	Жизненным циклом проекта называется вся совокупность операций над модулем от инициализации сборки до развертывания.

	Основные ветки жизненного цикла:
	clean
	site
	default

	Каждый шаг ЖЦ разделен на фазы. В каждой фазе может быть 0 или несколько целей ( goals )
	цель - задача которая должна быть выполнена во время доведения проекта до определенной стадии
	цель может иметь ноль или несколько фаз предшествующих ей

	Default самый главный Жизненный цикл который отвечает за сборку проекта
	- validate (валидация, проверка что в проекте все есть)
	- compile
	- test (прогон тестов)
	- package (упаковка проекта в jar)
	- inegration test (интеграционные тесты)
	- verify (проверка проекта)
	- install (инсталляция проекта (локально))
	- deploy (установка проекта удаленно)

	Clean - очистка проекта
	Site - для создания сайтов

	Плагин это логическое объединение нескольких целей
	Мы можем подключить плагин к какой то определенной фазе и задать ему goal